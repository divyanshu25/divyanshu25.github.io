<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment | Home</title>
    <link>/tag/deployment/</link>
      <atom:link href="/tag/deployment/index.xml" rel="self" type="application/rss+xml" />
    <description>Deployment</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 14 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Deployment</title>
      <link>/tag/deployment/</link>
    </image>
    
    <item>
      <title>Deploying Flask Application using Apache with mod_wsgi</title>
      <link>/post/flask-apache/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/flask-apache/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;We have written this blog to help developers deploy flask application with apache and mod_wsgi in production.
We read through a lot of articles and found out the steps we layout below are the simplest way to deploy.
Also, the biggest caveat to deploying in production is version mismatches, so we are going to be building things from source rather than using apt-get to install packages.
So let&amp;rsquo;s get started.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgbba5361&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;build-and-install-custom-version-of-python&#34;&gt;Build and install custom version of python&lt;/h1&gt;
&lt;p&gt;We used python 3.7.5 for a current project and here is how you can deploy python from source. Make sure you remove any other python version you might have on your machine.
To remove any existing python installations.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get purge python&amp;lt;version&amp;gt;
sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- Refer link for compilation: [Link](https://linuxize.com/post/how-to-install-python-3-7-on-ubuntu-18-04/)
--&gt;
&lt;p&gt;&lt;a id=&#34;orgb970147&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-install-dependencies-and-packages&#34;&gt;1. Install Dependencies and packages.&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev wget libbz2-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-download-source&#34;&gt;2. Download source&lt;/h2&gt;
&lt;p&gt;Now to fetch tar file for a specific python version use.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check out other python versions here: 
&lt;a href=&#34;https://www.python.org/downloads/source/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orge79fbcd&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-compile-python&#34;&gt;3. Compile python&lt;/h2&gt;
&lt;p&gt;Now to compile the downloaded tar.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar -xf Python-3.7.5.tgz
./configure --enable-shared --prefix=/usr/ 
make -j4
sudo make install 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Argument in make -j&lt;code&gt;N&lt;/code&gt; is the number of processors if you are not sure about number of processors in the machine. You can use
&lt;code&gt;nproc&lt;/code&gt; to get it.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;org895c7b7&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;build-and-install-custom-version-of-wsgi-mod&#34;&gt;Build and install custom version of wsgi mod&lt;/h1&gt;
&lt;p&gt;Ok, now we move on to getting mod_wsgi installation right. Before we get into steps I would like you to read this

&lt;a href=&#34;https://modwsgi.readthedocs.io/en/develop/user-guides/virtual-environments.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Link&lt;/a&gt;.
which essentially says this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The problem in trying to force mod_wsgi to use a different Python installation than what it was compiled for, 
even where it is the same Python version, is that the Python installation may itself not have been 
compiled with the same options. This is especially a problem when it comes to issues around how Python stores 
Unicode characters in memory. 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So to avoid this problem we are going to build mod_wsgi from the source and compile it with python we just installed in the last step.&lt;/p&gt;
&lt;h2 id=&#34;1-compile-wsgi-mod&#34;&gt;1. Compile wsgi-mod&lt;/h2&gt;
&lt;p&gt;Download source code from: 
&lt;a href=&#34;https://github.com/GrahamDumpleton/mod_wsgi/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xvfz mod_wsgi-X.Y.tar.gz
sudo apt-get install apache2-dev
./configure --with-python=/usr/bin/python
make -j4
sudo make install
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- Refer link for compilation: [wsgi](https://modwsgi.readthedocs.io/en/develop/user-guides/quick-installation-guide.html)
--&gt;
&lt;h1 id=&#34;configure-apache&#34;&gt;Configure Apache&lt;/h1&gt;
&lt;p&gt;Ok, now we move on to building apache2.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;orgd89c968&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-install-apache2&#34;&gt;1. Install apache2&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install apache2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a id=&#34;orga12ca17&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-configure-wsgi-module&#34;&gt;2. Configure Wsgi module&lt;/h2&gt;
&lt;p&gt;Now we need to configure apache with the mod_wsgi we complied and installed in the last step.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Create a file: `/etc/apache2/mods-available/wsgi.load`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following line to the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`LoadModule wsgi_module /usr/lib/apache2/modules/mod_wsgi.so`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to enable mod_wsgi and restart apache2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2enmod wsgi
sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This completes the installation of Apache2 and mod_wsgi, all complied with python3.7.5.&lt;/p&gt;
&lt;h1 id=&#34;deploying-flask-application&#34;&gt;Deploying Flask Application&lt;/h1&gt;
&lt;h2 id=&#34;1-create-wsgi-file&#34;&gt;1. Create .wsgi file&lt;/h2&gt;
&lt;p&gt;Now to deploy the flask application copy your code directory to
&lt;code&gt;/var/www/&lt;/code&gt; directory and create &lt;code&gt;&amp;lt;your_application&amp;gt;&lt;/code&gt;.wsgi file and add the following lines.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import sys
sys.path.insert(0, &#39;/var/www/&amp;lt;your_application_dir&amp;gt;&#39;)
from AOSServer import &amp;lt;your_application&amp;gt; as application
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-create-virtualenv&#34;&gt;2. Create virtualenv&lt;/h2&gt;
&lt;p&gt;Its generally best practice to create a virtualenv for your application and install all the dependencies, to avoid clashing package versions that
other application might be using. To create a virtualenv:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /var/www/
virtualenv -p python3 &amp;lt;venv_name&amp;gt;
pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you will need a &lt;code&gt;requiremnts.txt&lt;/code&gt; file. To create one you can do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-create-configuration-file-in-apache&#34;&gt;3. Create Configuration file in Apache&lt;/h2&gt;
&lt;p&gt;Now we need to create a configuration file to tell apache from where to load your application.
In &lt;code&gt;/etc/apache2/sites-available&lt;/code&gt; create &lt;code&gt;&amp;lt;your_application&amp;gt;.conf&lt;/code&gt; file and add the following lines.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;VirtualHost *:80&amp;gt;
       ServerName &amp;lt;Server_name&amp;gt;
       WSGIDaemonProcess AOSServer user=&amp;lt;user&amp;gt; group=&amp;lt;group&amp;gt; threads=5 \
       python-home=/var/www/&amp;lt;venv_name&amp;gt;
   
       WSGIProcessGroup &amp;lt;your_application&amp;gt;
       WSGIApplicationGroup %{GLOBAL}
       WSGIScriptAlias / /var/www/&amp;lt;your_application_dir&amp;gt;/&amp;lt;your_application&amp;gt;.wsgi
       &amp;lt;Directory /var/www/&amp;lt;your_application_dir&amp;gt;/&amp;lt;your_application&amp;gt;/&amp;gt;
           Order allow,deny
           Allow from all
           Require all granted
       &amp;lt;/Directory&amp;gt;
       Alias /static /var/www/&amp;lt;your_application_dir&amp;gt;/&amp;lt;your_application&amp;gt;/static
       &amp;lt;Directory /var/www/&amp;lt;your_application_dir&amp;gt;/&amp;lt;your_application&amp;gt;/static/&amp;gt;
           Order allow,deny
           Allow from all
        &amp;lt;/Directory&amp;gt;
        ErrorLog /var/www/&amp;lt;your_application_dir&amp;gt;/error.log
        LogLevel debug
        CustomLog /var/www/&amp;lt;your_application_dir&amp;gt;/access.log combined
   &amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can remove that logging commands if you don&amp;rsquo;t wish to see logs.&lt;/p&gt;
&lt;h2 id=&#34;4-enable-application&#34;&gt;4. Enable application&lt;/h2&gt;
&lt;p&gt;Now we need to tell apache to enable our application and load the configuration file we just created.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo a2ensite &amp;lt;your_application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&amp;rsquo;s it. Your website is up and running on the public IP for the server.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
